name: Auto Checkin Job

on:
  schedule:
    # 每天早上 6 点北京时间（UTC+8）运行
    - cron: '0 22 * * *'  # UTC 时间 22:00 对应北京时间 6:00
  workflow_dispatch:  # 允许手动触发

jobs:
  auto-sign:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # 指定 Python 版本

      # 3. 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # 如果有依赖文件

      # 4. 运行脚本并捕获输出
      - name: Run auto checkin script
        id: run_script  # 给步骤命名，方便后续引用输出
        continue-on-error: true
        env:
          TOKEN: ${{ secrets.TOKEN }}  # 从 GitHub Secrets 中获取 token
        run: |
          output=$(python auto_checkin.py "$TOKEN")
          extracted_output=$(echo "$output" | awk -F' - ' '{print $2}')  # 提取 - 之后的部分
          echo "::set-output name=output::$extracted_output"  # 将提取后的输出保存到步骤的输出变量中

      # 5. 使用 curl 推送消息到 iOS 手机（仅在 secrets 存在时执行）
      - name: Send notification via Bark using curl
        env:
          BARK_DEVICE_KEY: ${{ secrets.BARK_DEVICE_KEY }}  # 将 secret 传递给 env
          BARK_SERVER_URL: ${{ secrets.BARK_SERVER_URL }}  # 将 secret 传递给 env
        if: env.BARK_DEVICE_KEY != '' && env.BARK_SERVER_URL != ''  # 检查 env 变量是否存在
        run: |
          # 构造 Bark 的 API URL
          BARK_URL="$BARK_SERVER_URL/$BARK_DEVICE_KEY/库街区自动签到任务/${{ steps.run_script.outputs.result }}"
          
          # 使用 curl 发送请求
          curl -s -o /dev/null -w "%{http_code}" "$BARK_URL"
